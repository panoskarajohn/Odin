// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Slip.Service.DAL;

#nullable disable

namespace Slip.Service.Migrations
{
    [DbContext(typeof(SlipContext))]
    [Migration("20230110181227_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Slip.Service.Domain.Bet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSelections")
                        .HasColumnType("integer");

                    b.Property<string>("SlipId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Stake")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Winnings")
                        .HasColumnType("numeric");

                    b.HasKey("Id")
                        .HasName("PK_Bet");

                    b.HasIndex("SlipId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Slip.Service.Domain.BetSelection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BetId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("MarketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Odds")
                        .HasColumnType("numeric");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_BetSelection");

                    b.HasIndex("BetId");

                    b.HasIndex(new[] { "EventId" }, "IX_BetSelection_EventId");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("Slip.Service.Domain.Slip", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalStake")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_Slip");

                    b.ToTable("Slips");
                });

            modelBuilder.Entity("Slip.Service.Domain.Bet", b =>
                {
                    b.HasOne("Slip.Service.Domain.Slip", "Slip")
                        .WithMany("Bets")
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slip");
                });

            modelBuilder.Entity("Slip.Service.Domain.BetSelection", b =>
                {
                    b.HasOne("Slip.Service.Domain.Bet", "Bet")
                        .WithMany("Selections")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("Slip.Service.Domain.Bet", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("Slip.Service.Domain.Slip", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
